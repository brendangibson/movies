{"version":3,"sources":["config.js","services/search.ts","recoil/atoms.ts","components/Search.tsx","components/CartIcon.tsx","components/Header.tsx","components/BoxArt.tsx","components/Selector.tsx","components/MovieDisplay.tsx","components/Results.tsx","components/ResultsErrorBoundary.tsx","components/Content.tsx","components/Modal.tsx","components/Cart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["searchMovies","searchString","fetch","BASE_URL","config","movieSearchQuerySelector","selectorFamily","key","get","a","response","ok","results","json","Error","statusText","searchStringAtom","atom","default","selectedAtom","Set","cartOpenAtom","Search","setSearchString","useSetRecoilState","className","type","placeholder","onChange","e","target","value","role","aria-label","CartIcon","selectedMovies","useRecoilValue","setCartOpen","onClick","size","data-test","Header","BoxArt","url","title","src","alt","Selector","movie","useRecoilState","setSelectedMovies","isSelected","has","delete","add","MovieDisplay","selectable","isSmall","classnames","Title","Poster","Content","movieSearchQuery","map","imdbID","ResultsErrorBoundary","props","state","hasError","this","children","React","Component","fallback","Results","Modal","open","onClose","showClass","Cart","cartOpen","selected","boxArts","forEach","push","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.417ca4ce.chunk.js","sourcesContent":["export default {\r\n  API_KEY: \"dbcee211\",\r\n};\r\n","import config from \"../config.js\";\r\n\r\nconst BASE_URL = \"http://www.omdbapi.com/\";\r\n\r\n// GET request to the API to search for movies\r\nexport const searchMovies = (searchString: string) => {\r\n  return fetch(BASE_URL + \"?s=\" + searchString + \"&apikey=\" + config.API_KEY);\r\n};\r\n","import { atom, selectorFamily } from \"recoil\";\r\nimport { searchMovies } from \"../services/search\";\r\nimport { Movie } from \"../types/movie\";\r\n\r\n/**\r\n * All recoil functions\r\n */\r\n\r\nexport const movieSearchQuerySelector = selectorFamily({\r\n  key: \"movieSearch\",\r\n\r\n  // Make a request to the server to search for movies with the search string\r\n  get: (searchString: string) => async ({ get }) => {\r\n    if (searchString) {\r\n      const response = await searchMovies(searchString);\r\n      if (response.ok) {\r\n        const results = response.json();\r\n        return results;\r\n      }\r\n      throw new Error(response.statusText);\r\n    }\r\n  },\r\n});\r\n\r\n// Stores the currently input search string\r\nexport const searchStringAtom = atom({\r\n  key: \"searchStringAtom\",\r\n  default: \"\",\r\n});\r\n\r\n// Set of selected movies\r\nexport const selectedAtom = atom({\r\n  key: \"selected\",\r\n  default: new Set<Movie>(),\r\n});\r\n\r\n// Toggle for the cart modal\r\nexport const cartOpenAtom = atom({\r\n  key: \"cartOpen\",\r\n  default: false,\r\n});\r\n","import React from \"react\";\r\nimport { searchStringAtom } from \"../recoil/atoms\";\r\nimport { useSetRecoilState } from \"recoil\";\r\n\r\n/**\r\n * Search box\r\n * Updates recoil state when the input changes, which will force a request called in `Results`\r\n */\r\nconst Search = () => {\r\n  const setSearchString = useSetRecoilState(searchStringAtom);\r\n  return (\r\n    <div className=\"shadow flex rounded bg-white\">\r\n      <input\r\n        className=\"w-full p-2 rounded\"\r\n        type=\"text\"\r\n        placeholder=\"Search for a movie...\"\r\n        onChange={(e) => setSearchString(e.target.value)}\r\n      />\r\n      <span role=\"img\" aria-label=\"search\" className=\"text-3xl\">\r\n        ðŸ”Ž\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { selectedAtom, cartOpenAtom } from \"../recoil/atoms\";\r\nimport { useSetRecoilState } from \"recoil\";\r\n/**\r\n * Shows a cart icon with a badge for the number of selected movies\r\n */\r\nconst CartIcon = () => {\r\n  const selectedMovies = useRecoilValue(selectedAtom);\r\n  const setCartOpen = useSetRecoilState(cartOpenAtom);\r\n\r\n  return (\r\n    <div\r\n      className=\"self-end relative cursor-pointer ml-auto text-4xl\"\r\n      onClick={() => setCartOpen(true)}\r\n    >\r\n      <span role=\"img\" aria-label=\"cart\">\r\n        ðŸ›’\r\n      </span>\r\n      {selectedMovies.size ? (\r\n        <div\r\n          data-test=\"size\"\r\n          className=\"absolute rounded-full h-8 w-8 bg-red-600 absolute top-0 right-0 text-center text-xl\"\r\n        >\r\n          {selectedMovies.size}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartIcon;\r\n","import React from \"react\";\r\nimport Search from \"./Search\";\r\nimport CartIcon from \"./CartIcon\";\r\n\r\n/**\r\n * Fixed box at the top of the screen containing the search box and the cart link\r\n */\r\nconst Header = () => (\r\n  <>\r\n    <header className=\"flex flex-row h-16 fixed bg-gray-800 w-full p-2 z-50\">\r\n      <Search />\r\n      <CartIcon />\r\n    </header>\r\n    {/* To create space behind the fixed header */}\r\n    <div className=\"h-16\" />\r\n  </>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\ninterface Props {\r\n  url: string;\r\n  title: string;\r\n}\r\n\r\n/**\r\n * Shows the box art for a movie\r\n */\r\nconst BoxArt = ({ url, title }: Props) => {\r\n  return (\r\n    <div>\r\n      {url === \"N/A\" ? (\r\n        <div className=\"bg-gray-400 m-1 p-1 absolute inset-0\">{title}</div>\r\n      ) : (\r\n        <img src={url} alt={title} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoxArt;\r\n","import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { selectedAtom } from \"../recoil/atoms\";\r\nimport { Movie } from \"../types/movie\";\r\n\r\ninterface Props {\r\n  movie: Movie;\r\n}\r\n/**\r\n * Shows an indicator of whether a movie is selected.\r\n * It is clickable to change state\r\n */\r\nconst Selector = ({ movie }: Props) => {\r\n  const [selectedMovies, setSelectedMovies] = useRecoilState(selectedAtom);\r\n\r\n  const isSelected = selectedMovies.has(movie);\r\n\r\n  return (\r\n    <div\r\n      className=\"absolute inset-0 cursor-pointer\"\r\n      onClick={() => {\r\n        isSelected ? selectedMovies.delete(movie) : selectedMovies.add(movie);\r\n\r\n        setSelectedMovies(selectedMovies);\r\n      }}\r\n    >\r\n      {isSelected ? (\r\n        <div className=\"absolute right-0 bottom-0 text-center bg-opacity-75 bg-white rounded-full h-10 w-10 m-3\">\r\n          <span className=\"text-green-500 text-2xl font-extrabold\">âœ“</span>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Selector;\r\n","import React from \"react\";\r\nimport BoxArt from \"./BoxArt\";\r\nimport Selector from \"./Selector\";\r\nimport { Movie } from \"../types/movie\";\r\nimport classnames from \"classnames\";\r\n\r\ninterface Props {\r\n  movie: Movie;\r\n  size?: \"small\" | \"large\";\r\n  selectable?: boolean;\r\n}\r\n\r\n/**\r\n * Displays a movie and a clickable area to select it\r\n */\r\nconst MovieDisplay = ({ movie, size = \"large\", selectable = true }: Props) => {\r\n  const isSmall = size === \"small\";\r\n  return (\r\n    <div\r\n      className={classnames(\r\n        \"relative p-1 min-h-40\",\r\n        { \"w-32 md:w-64\": !isSmall },\r\n        { \"w-16 md:w-32\": isSmall }\r\n      )}\r\n    >\r\n      <BoxArt title={movie.Title} url={movie.Poster} />\r\n      {selectable ? <Selector movie={movie} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieDisplay;\r\n","import React from \"react\";\r\nimport MovieDisplay from \"./MovieDisplay\";\r\nimport { searchStringAtom, movieSearchQuerySelector } from \"../recoil/atoms\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { Movie } from \"../types/movie\";\r\n\r\n/**\r\n * Shows the search results\r\n */\r\nconst Content = () => {\r\n  const searchString = useRecoilValue<string>(searchStringAtom);\r\n\r\n  // Makes the request to get movie results\r\n  const movieSearchQuery = useRecoilValue(\r\n    movieSearchQuerySelector(searchString)\r\n  );\r\n\r\n  const results = movieSearchQuery?.Search;\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"text-gray-200\">\r\n        {results\r\n          ? \"Click on a movie to add it to your cart\"\r\n          : \"Type more letters to get search results\"}\r\n      </h3>\r\n      <div className=\"flex flex-row flex-wrap justify-around\">\r\n        {results?.map((movie: Movie) => (\r\n          <MovieDisplay movie={movie} key={movie.imdbID} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React, { ReactNode } from \"react\";\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n}\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n}\r\n\r\n/**\r\n * Error boundary for the results display\r\n */\r\nclass ResultsErrorBoundary extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    return { hasError: true };\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>No results</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ResultsErrorBoundary;\r\n","import React, { Suspense } from \"react\";\r\nimport Results from \"./Results\";\r\nimport ResultsErrorBoundary from \"./ResultsErrorBoundary\";\r\n\r\n/**\r\n * Main content section of the page\r\n */\r\nconst Content = () => {\r\n  return (\r\n    <div className=\"p-2\">\r\n      <ResultsErrorBoundary>\r\n        {/* TODO: make the loading prettier */}\r\n        <Suspense fallback=\"Loading...\">\r\n          <Results />\r\n        </Suspense>\r\n      </ResultsErrorBoundary>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React, { ReactNode } from \"react\";\r\n\r\ninterface Props {\r\n  open?: boolean;\r\n  onClose?: () => void;\r\n  children: ReactNode;\r\n}\r\n\r\n/**\r\n * Modal\r\n */\r\nconst Modal = ({ open = false, children, onClose }: Props) => {\r\n  const showClass = open ? \"\" : \"hidden\";\r\n  return (\r\n    <div\r\n      onClick={onClose}\r\n      className={`fixed inset-0 z-50 overflow-auto bg-opacity-50 bg-gray-100 flex ${showClass}`}\r\n    >\r\n      <div className=\"relative p-8 bg-white w-full max-w-md m-auto flex-col flex shadow-xl\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { ReactElement } from \"react\";\r\nimport Modal from \"./Modal\";\r\nimport MovieDisplay from \"./MovieDisplay\";\r\nimport { cartOpenAtom, selectedAtom } from \"../recoil/atoms\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\n\r\n/**\r\n * Shows the movies that the user has selected in a modal\r\n */\r\nconst Cart = () => {\r\n  const [cartOpen, setCartOpen] = useRecoilState(cartOpenAtom);\r\n  const selected = useRecoilValue(selectedAtom);\r\n\r\n  const boxArts: ReactElement[] = [];\r\n  selected.forEach((movie) =>\r\n    boxArts.push(\r\n      <MovieDisplay\r\n        movie={movie}\r\n        key={movie.imdbID}\r\n        size=\"small\"\r\n        selectable={false}\r\n      />\r\n    )\r\n  );\r\n\r\n  return (\r\n    <Modal open={cartOpen} onClose={() => setCartOpen(false)}>\r\n      <h2 className=\"text-3xl\">Cart</h2>\r\n      <div className=\"flex flex-wrap\">{boxArts}</div>\r\n      <p>Click to dismiss</p>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport Cart from \"./components/Cart\";\n\nimport { RecoilRoot } from \"recoil\";\n\n/**\n * Entry point for the application\n */\nconst App = () => {\n  return (\n    <RecoilRoot>\n      <Header />\n\n      <div className=\"p-2\">\n        <Content />\n        <Cart />\n      </div>\n    </RecoilRoot>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}